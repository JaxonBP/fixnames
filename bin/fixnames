#!/usr/bin/env ruby
require 'optparse'
require 'rubygems'

$LOAD_PATH.unshift(File.expand_path(File.dirname(__FILE__) + "/../lib"))
require 'fixnames'

options = Fixnames::DEFAULT_OPTIONS.dup
optparse = OptionParser.new do |opts|
  opts.banner = "Filename fixer to enforce bash-friendly filenames"
  opts.define_head "Usage: #{$0} [options] <file> [<file> ... ]"

  opts.separator ''
  opts.separator '  FILTERS:'

  opts.on('-A', '--[no-]hack_and',
          'Replace "&" with "_and_"'
          ) { |val| options[:hack_and] = val }

  opts.on('-C', '--[no-]semicolon',
          'Replace ";" with "-"'
          ) { |val| options[:semicolon] = val }

  opts.on('-B', '--[no-]banners',
          'Trims [FOO] style advert prefixs from the beginning'
          ) { |val| options[:banners] = val }

  opts.on('-b', '--[no-]brackets',
         'Trims (round) or [square] bracket regions'
          ) { |val| options[:brackets] = val }

  opts.on('-k', '--[no-]checksums',
         'Trims [0A1B2C3D] CRC32 checksums from names. ( [] or () )'
          ) { |val| options[:checksums] = val }

  opts.on('-d', '--[no-]dots',
         'Trims excessive dots from files (before the .extention)'
          ) { |val| options[:fix_dots] = val }

  opts.on('-c', '--[no-]camelcase',
          'Undo camelCase with underscores. "aB" becomes "a_b"'
          ) { |val| options[:camelcase] = val }

  opts.on('-l', '--[no-]lowercase',
          'Forces all letters to lowercase'
          ) { |val| options[:lowercase] = val }

  opts.separator ''
  opts.separator '  CHARACTERS:'

  opts.on('-w', '--whitespace=CHARLIST',
          "Characters to treat as whitespace, to be replaced with underscores."
          ) { |val| options[:whitespace] = val }

  opts.on('-W', '--no-whitespace',
          'Do not parse any character as whitespace'
          ) {       options[:whitespace] = nil }

  opts.on('-s', '--strip=CHARLIST',
          "Characters to strip from names. default: #{options[:charstrip]}"
          ) { |val| options[:charstrip] = val }

  opts.on('-S', '--no-strip',
          'Do not strip any specific characters'
          ) {       options[:charstrip] = nil }

  opts.separator ''
  opts.separator '  REGEX-REPLACE:'

  opts.on('-x', '--expunge=REGEX',
          'Expung a regexp from all filenames'
          ) { |val| options[:expunge] = val }

  opts.on('-r', '--replace=STRING',
          'Replace expunged text with'
          ) { |val| options[:mendstr] = val }

  opts.separator ''
  opts.separator '  COLLECTIONS:'

  opts.on('-f', '--full',
          'All filters are turned on!'
          ) do
    options.each_pair do |k,v|
      options[k] = true if options[k].eql?(false)
    end
  end

  opts.separator ''
  opts.separator '  META:'

  opts.on('-p', '--pretend',
          'Pretend to run; no filesystem changes are made'
          ) {       options[:pretend] = true }

  opts.on('-v', '--verbose',
          'Verbose mode -- repeat for more output'
          ) {       options[:verbose] += 1 }

  Term::ANSIColor::coloring = STDOUT.isatty
  opts.on('-n', '--no-color',
          'Suppress ANSI escape codes in the output'
          ) {       Term::ANSIColor::coloring = false }

  opts.on('-h', '--help', 'Show this help message') do
    puts opts
    exit
  end
end

optparse.parse!

filelist = ARGV
filelist = Dir["*"] if ARGV.length < 1

Fixnames.fix_files! filelist, options

