#!/usr/bin/env ruby
require 'optparse'
require 'rubygems'

$LOAD_PATH.unshift(File.expand_path(File.dirname(__FILE__) + "/../lib"))
require 'fixnames'

$fixmode = $0 =~ /dir/ ? :dir : :file

options = Fixnames::Option.new

case $fixmode
when :file
  $banner = "Filename fixer to enforce bash-friendly filenames"
when :dir
  $banner = "Whole-directory filename fixer to enforce bash-friendly filenames"
  options.recursive = true
end

optparse = OptionParser.new do |opts|
  opts.banner = $banner
  opts.define_head "Usage: #{$0} [options] <file> [<file> ... ]"
  opts.summary_width = 24
  opts.summary_indent = '  '

  desc_pad = ' ' * (opts.summary_width + 3)

  opts.separator ''
  opts.separator 'DIRECTORIES:'

  opts.on('-g', '--glob=GLOB_STRING',
          "Filename glob to use inside each directory for when
#{desc_pad}we are left to ourself. Default: #{options.dir_glob}"
          ) { |val| options.dir_glob = val }

  opts.on('-R', '--[no-]recursive',
          'Recursively descend into directories'
          ) { |val| options.recursive = val }

  opts.separator ''
  opts.separator 'FILTERS:'

  opts.on('-A', '--[no-]hack_and',
          'Replace "&" with "_and_"'
          ) { |val| options.hack_and = val }

  opts.on('-C', '--[no-]semicolon',
          'Replace ";" with "-"'
          ) { |val| options.semicolon = val }

  opts.on('-B', '--[no-]banners',
          'Trims [FOO] style advert prefixs from the beginning'
          ) { |val| options.banners = val }

  opts.on('-b', '--[no-]brackets',
         'Trims (round) or [square] bracket regions'
          ) { |val| options.brackets = val }

  opts.on('-k', '--[no-]checksums',
         "Trims [0A1B2C3D] CRC32 bracket-wrapped checksums
#{desc_pad}from names, when wrapped with square brackes []
#{desc_pad}or round parens ()"
          ) { |val| options.checksums = val }

  opts.on('-d', '--[no-]dots',
         'Trims excessive dots from files
 (before the .extention)'
          ) { |val| options.fix_dots = val }

  opts.on('-D', '--[no-]dashes',
         'Trims redundant dashes, and leading/trailing dashes'
          ) { |val| options.fix_dashes = val }

  opts.on('-c', '--[no-]camelcase',
          'Undo camelCase with underscores. "aB" becomes "a_b"'
          ) { |val| options.camelcase = val }

  opts.on('-l', '--[no-]lowercase',
          'Forces all letters to lowercase'
          ) { |val| options.lowercase = val }

  opts.separator ''
  opts.separator 'CHARACTERS:'

  opts.on('-w', '--whitespace=CHARS',
          "Characters to treat as whitespace, to be
#{desc_pad}replaced with underscores."
          ) { |val| options.whitespace = val }

  opts.on('-W', '--no-whitespace',
          'Do not parse any character as whitespace'
          ) {       options.whitespace = nil }

  opts.on('-s', '--strip=CHARLIST',
          "Individual characters to strip from names.
#{desc_pad}Default: #{options.charstrip}"
          ) { |val| options.charstrip = val }

  opts.on('-S', '--no-strip',
          'Do not strip any specific characters'
          ) {       options.charstrip = nil }

  opts.separator ''
  opts.separator 'REGEX-REPLACE:'

  opts.on('-x', '--expunge [REGEX]',
          "Expung a regexp from all filenames. If a REGEX is
#{desc_pad}not specified, it searches the current directory's
#{desc_pad}filenames for a common prefix that can be removed."
          ) do |val|
    if val.nil?
      options.expunge_common_prefix!
    else
      options.expunge = val
    end
  end

  opts.on('-r', '--replace=STRING',
          'Replace expunged text with the given STRING'
          ) { |val| options.mendstr = val }

  opts.separator ''
  opts.separator 'COLLECTIONS:'

  opts.on('-f', '--full',
          'All filters are turned on!'
          ) do
    options.all_flags = true
  end

  opts.on('-M', '--max-autofix',
          "All of --full plus standard options elsewhere.
#{desc_pad}Should be mostly safe, as we do not clobber fixes
#{desc_pad}when renaming, but could still be dangerous!"
          ) do
    options.all_flags = true
    options.expunge_common_prefix! if options.expunge.nil?
  end

  opts.separator ''
  opts.separator 'META:'

  opts.on('-p', '--pretend',
          'Pretend to run; no filesystem changes are made'
          ) {       options.pretend = true }

  opts.on('-v', '--verbose',
          'Verbose mode -- repeat for more output'
          ) {       options.verbose += 1 }

  Term::ANSIColor::coloring = STDOUT.isatty
  opts.on('-n', '--no-color',
          'Suppress ANSI escape codes in the output'
          ) {       Term::ANSIColor::coloring = false }

  opts.on('-h', '--help', 'Show this help message') do
    puts opts
    exit
  end
end

optparse.parse!

if options.verbose > 2
  puts "FIXMODE: #{$fixmode}"
end

filelist = ARGV
filelist = Dir['*'] if ARGV.length < 1

Fixnames::FixFile.fix_list! filelist, options
